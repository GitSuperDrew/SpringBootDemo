/*
 * This file is generated by jOOQ.
 */
package com.study.module.jooq.tables;


import com.study.module.jooq.Keys;
import com.study.module.jooq.Zero;
import com.study.module.jooq.tables.records.PoetRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Poet extends TableImpl<PoetRecord> {

    private static final long serialVersionUID = 139064567;

    /**
     * The reference instance of <code>zero.poet</code>
     */
    public static final Poet POET = new Poet();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PoetRecord> getRecordType() {
        return PoetRecord.class;
    }

    /**
     * The column <code>zero.poet.id</code>.
     */
    public final TableField<PoetRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>zero.poet.name</code>.
     */
    public final TableField<PoetRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>zero.poet</code> table reference
     */
    public Poet() {
        this(DSL.name("poet"), null);
    }

    /**
     * Create an aliased <code>zero.poet</code> table reference
     */
    public Poet(String alias) {
        this(DSL.name(alias), POET);
    }

    /**
     * Create an aliased <code>zero.poet</code> table reference
     */
    public Poet(Name alias) {
        this(alias, POET);
    }

    private Poet(Name alias, Table<PoetRecord> aliased) {
        this(alias, aliased, null);
    }

    private Poet(Name alias, Table<PoetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Poet(Table<O> child, ForeignKey<O, PoetRecord> key) {
        super(child, key, POET);
    }

    @Override
    public Schema getSchema() {
        return Zero.ZERO;
    }

    @Override
    public UniqueKey<PoetRecord> getPrimaryKey() {
        return Keys.KEY_POET_PRIMARY;
    }

    @Override
    public List<UniqueKey<PoetRecord>> getKeys() {
        return Arrays.<UniqueKey<PoetRecord>>asList(Keys.KEY_POET_PRIMARY);
    }

    @Override
    public Poet as(String alias) {
        return new Poet(DSL.name(alias), this);
    }

    @Override
    public Poet as(Name alias) {
        return new Poet(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Poet rename(String name) {
        return new Poet(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Poet rename(Name name) {
        return new Poet(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
