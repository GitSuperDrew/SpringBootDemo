/*
 * This file is generated by jOOQ.
 */
package com.study.module.jooq.tables.records;


import com.study.module.jooq.tables.Poetry;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PoetryRecord extends UpdatableRecordImpl<PoetryRecord> implements Record4<Integer, Integer, String, String> {

    private static final long serialVersionUID = 1722577031;

    /**
     * Setter for <code>zero.poetry.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>zero.poetry.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>zero.poetry.poet_id</code>.
     */
    public void setPoetId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>zero.poetry.poet_id</code>.
     */
    public Integer getPoetId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>zero.poetry.title</code>.
     */
    public void setTitle(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>zero.poetry.title</code>.
     */
    public String getTitle() {
        return (String) get(2);
    }

    /**
     * Setter for <code>zero.poetry.content</code>.
     */
    public void setContent(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>zero.poetry.content</code>.
     */
    public String getContent() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, Integer, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Poetry.POETRY.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Poetry.POETRY.POET_ID;
    }

    @Override
    public Field<String> field3() {
        return Poetry.POETRY.TITLE;
    }

    @Override
    public Field<String> field4() {
        return Poetry.POETRY.CONTENT;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getPoetId();
    }

    @Override
    public String component3() {
        return getTitle();
    }

    @Override
    public String component4() {
        return getContent();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getPoetId();
    }

    @Override
    public String value3() {
        return getTitle();
    }

    @Override
    public String value4() {
        return getContent();
    }

    @Override
    public PoetryRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public PoetryRecord value2(Integer value) {
        setPoetId(value);
        return this;
    }

    @Override
    public PoetryRecord value3(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public PoetryRecord value4(String value) {
        setContent(value);
        return this;
    }

    @Override
    public PoetryRecord values(Integer value1, Integer value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PoetryRecord
     */
    public PoetryRecord() {
        super(Poetry.POETRY);
    }

    /**
     * Create a detached, initialised PoetryRecord
     */
    public PoetryRecord(Integer id, Integer poetId, String title, String content) {
        super(Poetry.POETRY);

        set(0, id);
        set(1, poetId);
        set(2, title);
        set(3, content);
    }
}
