/*
 * This file is generated by jOOQ.
 */
package edu.study.module.springbootjooq.generate.tables.daos;


import edu.study.module.springbootjooq.generate.tables.Poet;
import edu.study.module.springbootjooq.generate.tables.records.PoetRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PoetDao extends DAOImpl<PoetRecord, Poet, Integer> {

    /**
     * Create a new PoetDao without any configuration
     */
    public PoetDao() {
        super(Poet.POET, Poet.class);
    }

    /**
     * Create a new PoetDao with an attached configuration
     */
    public PoetDao(Configuration configuration) {
        super(Poet.POET, Poet.class, configuration);
    }

    @Override
    public Integer getId(Poet object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<Poet> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Poet.POET.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<Poet> fetchById(Integer... values) {
        return fetch(Poet.POET.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Poet fetchOneById(Integer value) {
        return fetchOne(Poet.POET.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<Poet> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Poet.POET.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<Poet> fetchByName(String... values) {
        return fetch(Poet.POET.NAME, values);
    }
}
