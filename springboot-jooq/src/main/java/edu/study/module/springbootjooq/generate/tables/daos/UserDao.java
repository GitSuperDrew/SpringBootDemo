/*
 * This file is generated by jOOQ.
 */
package edu.study.module.springbootjooq.generate.tables.daos;


import edu.study.module.springbootjooq.generate.tables.records.UserRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * 用户表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserDao extends DAOImpl<UserRecord, edu.study.module.springbootjooq.generate.tables.pojos.User, Long> {

    /**
     * Create a new UserDao without any configuration
     */
    public UserDao() {
        super(edu.study.module.springbootjooq.generate.tables.User.USER, edu.study.module.springbootjooq.generate.tables.pojos.User.class);
    }

    /**
     * Create a new UserDao with an attached configuration
     */
    public UserDao(Configuration configuration) {
        super(edu.study.module.springbootjooq.generate.tables.User.USER, edu.study.module.springbootjooq.generate.tables.pojos.User.class, configuration);
    }

    @Override
    public Long getId(edu.study.module.springbootjooq.generate.tables.pojos.User object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<edu.study.module.springbootjooq.generate.tables.pojos.User> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(edu.study.module.springbootjooq.generate.tables.User.USER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<edu.study.module.springbootjooq.generate.tables.pojos.User> fetchById(Long... values) {
        return fetch(edu.study.module.springbootjooq.generate.tables.User.USER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public edu.study.module.springbootjooq.generate.tables.pojos.User fetchOneById(Long value) {
        return fetchOne(edu.study.module.springbootjooq.generate.tables.User.USER.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<edu.study.module.springbootjooq.generate.tables.pojos.User> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(edu.study.module.springbootjooq.generate.tables.User.USER.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<edu.study.module.springbootjooq.generate.tables.pojos.User> fetchByName(String... values) {
        return fetch(edu.study.module.springbootjooq.generate.tables.User.USER.NAME, values);
    }

    /**
     * Fetch records that have <code>age BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<edu.study.module.springbootjooq.generate.tables.pojos.User> fetchRangeOfAge(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(edu.study.module.springbootjooq.generate.tables.User.USER.AGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>age IN (values)</code>
     */
    public List<edu.study.module.springbootjooq.generate.tables.pojos.User> fetchByAge(Integer... values) {
        return fetch(edu.study.module.springbootjooq.generate.tables.User.USER.AGE, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<edu.study.module.springbootjooq.generate.tables.pojos.User> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(edu.study.module.springbootjooq.generate.tables.User.USER.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<edu.study.module.springbootjooq.generate.tables.pojos.User> fetchByEmail(String... values) {
        return fetch(edu.study.module.springbootjooq.generate.tables.User.USER.EMAIL, values);
    }

    /**
     * Fetch records that have <code>remove_tag BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<edu.study.module.springbootjooq.generate.tables.pojos.User> fetchRangeOfRemoveTag(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(edu.study.module.springbootjooq.generate.tables.User.USER.REMOVE_TAG, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>remove_tag IN (values)</code>
     */
    public List<edu.study.module.springbootjooq.generate.tables.pojos.User> fetchByRemoveTag(Integer... values) {
        return fetch(edu.study.module.springbootjooq.generate.tables.User.USER.REMOVE_TAG, values);
    }
}
