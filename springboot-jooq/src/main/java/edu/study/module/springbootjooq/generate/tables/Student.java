/*
 * This file is generated by jOOQ.
 */
package edu.study.module.springbootjooq.generate.tables;


import edu.study.module.springbootjooq.generate.Keys;
import edu.study.module.springbootjooq.generate.Zero;
import edu.study.module.springbootjooq.generate.tables.records.StudentRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Student extends TableImpl<StudentRecord> {

    private static final long serialVersionUID = 1590373790;

    /**
     * The reference instance of <code>zero.student</code>
     */
    public static final Student STUDENT = new Student();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudentRecord> getRecordType() {
        return StudentRecord.class;
    }

    /**
     * The column <code>zero.student.stu_id</code>. 学生ID，主键
     */
    public final TableField<StudentRecord, Integer> STU_ID = createField(DSL.name("stu_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "学生ID，主键");

    /**
     * The column <code>zero.student.stu_name</code>. 学生姓名
     */
    public final TableField<StudentRecord, String> STU_NAME = createField(DSL.name("stu_name"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "学生姓名");

    /**
     * The column <code>zero.student.stu_age</code>. 学生年龄
     */
    public final TableField<StudentRecord, Integer> STU_AGE = createField(DSL.name("stu_age"), org.jooq.impl.SQLDataType.INTEGER, this, "学生年龄");

    /**
     * The column <code>zero.student.stu_sex</code>. 学生性别（0：未知，1：男，2：女）
     */
    public final TableField<StudentRecord, String> STU_SEX = createField(DSL.name("stu_sex"), org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.CHAR)), this, "学生性别（0：未知，1：男，2：女）");

    /**
     * The column <code>zero.student.deleted</code>. 逻辑删除标识（0：有效数据，1：无效数据）
     */
    public final TableField<StudentRecord, Integer> DELETED = createField(DSL.name("deleted"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "逻辑删除标识（0：有效数据，1：无效数据）");

    /**
     * Create a <code>zero.student</code> table reference
     */
    public Student() {
        this(DSL.name("student"), null);
    }

    /**
     * Create an aliased <code>zero.student</code> table reference
     */
    public Student(String alias) {
        this(DSL.name(alias), STUDENT);
    }

    /**
     * Create an aliased <code>zero.student</code> table reference
     */
    public Student(Name alias) {
        this(alias, STUDENT);
    }

    private Student(Name alias, Table<StudentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Student(Name alias, Table<StudentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Student(Table<O> child, ForeignKey<O, StudentRecord> key) {
        super(child, key, STUDENT);
    }

    @Override
    public Schema getSchema() {
        return Zero.ZERO;
    }

    @Override
    public Identity<StudentRecord, Integer> getIdentity() {
        return Keys.IDENTITY_STUDENT;
    }

    @Override
    public UniqueKey<StudentRecord> getPrimaryKey() {
        return Keys.KEY_STUDENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<StudentRecord>> getKeys() {
        return Arrays.<UniqueKey<StudentRecord>>asList(Keys.KEY_STUDENT_PRIMARY);
    }

    @Override
    public Student as(String alias) {
        return new Student(DSL.name(alias), this);
    }

    @Override
    public Student as(Name alias) {
        return new Student(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Student rename(String name) {
        return new Student(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Student rename(Name name) {
        return new Student(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, Integer, String, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
