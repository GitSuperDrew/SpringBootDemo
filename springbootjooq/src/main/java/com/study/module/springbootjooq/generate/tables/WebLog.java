/*
 * This file is generated by jOOQ.
 */
package com.study.module.springbootjooq.generate.tables;


import com.study.module.springbootjooq.generate.Keys;
import com.study.module.springbootjooq.generate.Zero;
import com.study.module.springbootjooq.generate.tables.records.WebLogRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 系统日志表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WebLog extends TableImpl<WebLogRecord> {

    private static final long serialVersionUID = 1602887461;

    /**
     * The reference instance of <code>zero.web_log</code>
     */
    public static final WebLog WEB_LOG = new WebLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WebLogRecord> getRecordType() {
        return WebLogRecord.class;
    }

    /**
     * The column <code>zero.web_log.id</code>. 唯一标识
     */
    public final TableField<WebLogRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "唯一标识");

    /**
     * The column <code>zero.web_log.code</code>. 请求状态码（例如：200,500,404等）
     */
    public final TableField<WebLogRecord, Integer> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.INTEGER, this, "请求状态码（例如：200,500,404等）");

    /**
     * The column <code>zero.web_log.description</code>. 操作描述
     */
    public final TableField<WebLogRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "操作描述");

    /**
     * The column <code>zero.web_log.username</code>. 操作用户
     */
    public final TableField<WebLogRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(32), this, "操作用户");

    /**
     * The column <code>zero.web_log.start_time</code>. 操作时间
     */
    public final TableField<WebLogRecord, Long> START_TIME = createField(DSL.name("start_time"), org.jooq.impl.SQLDataType.BIGINT, this, "操作时间");

    /**
     * The column <code>zero.web_log.spend_time</code>. 消耗时间（毫秒）
     */
    public final TableField<WebLogRecord, Long> SPEND_TIME = createField(DSL.name("spend_time"), org.jooq.impl.SQLDataType.BIGINT, this, "消耗时间（毫秒）");

    /**
     * The column <code>zero.web_log.base_path</code>. 根路径
     */
    public final TableField<WebLogRecord, String> BASE_PATH = createField(DSL.name("base_path"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "根路径");

    /**
     * The column <code>zero.web_log.uri</code>. URI
     */
    public final TableField<WebLogRecord, String> URI = createField(DSL.name("uri"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "URI");

    /**
     * The column <code>zero.web_log.url</code>. URL
     */
    public final TableField<WebLogRecord, String> URL = createField(DSL.name("url"), org.jooq.impl.SQLDataType.VARCHAR(552), this, "URL");

    /**
     * The column <code>zero.web_log.method</code>. 请求类型
     */
    public final TableField<WebLogRecord, String> METHOD = createField(DSL.name("method"), org.jooq.impl.SQLDataType.VARCHAR(32), this, "请求类型");

    /**
     * The column <code>zero.web_log.ip</code>. IP地址
     */
    public final TableField<WebLogRecord, String> IP = createField(DSL.name("ip"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "IP地址");

    /**
     * The column <code>zero.web_log.parameter</code>. 请求参数
     */
    public final TableField<WebLogRecord, String> PARAMETER = createField(DSL.name("parameter"), org.jooq.impl.SQLDataType.CLOB, this, "请求参数");

    /**
     * The column <code>zero.web_log.result</code>. 请求返回的结果
     */
    public final TableField<WebLogRecord, String> RESULT = createField(DSL.name("result"), org.jooq.impl.SQLDataType.CLOB, this, "请求返回的结果");

    /**
     * Create a <code>zero.web_log</code> table reference
     */
    public WebLog() {
        this(DSL.name("web_log"), null);
    }

    /**
     * Create an aliased <code>zero.web_log</code> table reference
     */
    public WebLog(String alias) {
        this(DSL.name(alias), WEB_LOG);
    }

    /**
     * Create an aliased <code>zero.web_log</code> table reference
     */
    public WebLog(Name alias) {
        this(alias, WEB_LOG);
    }

    private WebLog(Name alias, Table<WebLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private WebLog(Name alias, Table<WebLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("系统日志表"), TableOptions.table());
    }

    public <O extends Record> WebLog(Table<O> child, ForeignKey<O, WebLogRecord> key) {
        super(child, key, WEB_LOG);
    }

    @Override
    public Schema getSchema() {
        return Zero.ZERO;
    }

    @Override
    public Identity<WebLogRecord, Long> getIdentity() {
        return Keys.IDENTITY_WEB_LOG;
    }

    @Override
    public UniqueKey<WebLogRecord> getPrimaryKey() {
        return Keys.KEY_WEB_LOG_PRIMARY;
    }

    @Override
    public List<UniqueKey<WebLogRecord>> getKeys() {
        return Arrays.<UniqueKey<WebLogRecord>>asList(Keys.KEY_WEB_LOG_PRIMARY);
    }

    @Override
    public WebLog as(String alias) {
        return new WebLog(DSL.name(alias), this);
    }

    @Override
    public WebLog as(Name alias) {
        return new WebLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WebLog rename(String name) {
        return new WebLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WebLog rename(Name name) {
        return new WebLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, Integer, String, String, Long, Long, String, String, String, String, String, String, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
